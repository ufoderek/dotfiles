function cu {
	local CURDIR=$PWD
	if [ -z "$1" ]; then
		#no argument, cd to git/svn/repo root, root or home
		until [ -d "$CURDIR/.git" ] || [ -d "$CURDIR/.repo" ] || \
		      [ -d "$CURDIR/.svn" ] || [ "$CURDIR" == "$HOME" ] || \
		      [ "$CURDIR" == "/" ]; do
			CURDIR=$(dirname $CURDIR)
		done
	elif [ $1 -eq $1 2> /dev/null ]; then
		#argument is integer, cd to upper ($1-level) directory
		for i in $(seq $1); do
			CURDIR=$(dirname $CURDIR)
		done
	fi
	cd $CURDIR
}

function is_osx {
	local uname_str=`uname`
	if [[ "$uname_str" == Darwin ]]; then
		return 0 #success
	else
		return 1
	fi
}

function is_linux {
	local uname_str=`uname`
	if [[ "$uname_str" == Linux ]]; then
		return 0 #success
	else
		return 1
	fi
}

function is_nvt {
	local my_host=`hostname`
	if [[ "$my_host" == oaalnx* ]]; then
		return 0 #success
	elif [[ "$my_host" == oaplnx* ]]; then
		return 0 #success
	elif [[ "$my_host" == oaplnx*vm ]]; then
		return 0 #success
	else
		return 1
	fi
}

#function parse_git_branch {
#	git branch --no-color 2> /dev/null | \
#	sed -e '/^[^*]/d' -e "s/* \(.*\)/ (\1)/" -e "s/(no branch)/?/"
#}

#function parse_svn_rev {
#	svn info 2> /dev/null | sed -n -e '/^Revision: \([0-9]*\).*$/s//\1/p'
#}

function wk {
	if [ -n "$1" ]; then
		if [ -n "$2" ]; then
			cd ~/wk/$1/$2 && ls -F --time-style=long-iso -v --color=auto
		else
			cd ~/wk/$1 && ls -F --time-style=long-iso -v --color=auto
		fi
	else
		cd ~/wk && ls -F --time-style=long-iso -v --color=auto
	fi
}

function __git_branch_name {
	__git_ps1 | sed -e "s/^..//" -e "s/.$//"
}

function gobo {
	echo "git checkout --branch $1 origin/$1"
	git checkout --branch $1 origin/$1
}

function grho {
	local bname
	if [[ "$1" == "" ]]; then
		bname=`__git_branch_name`
	else
		bname=$1
	fi
	echo "git rebase origin/$bname"
	git reset --hard origin/$bname
}

function grbo {
	local bname
	if [[ "$1" == "" ]]; then
		bname=`__git_branch_name`
	else
		bname=$1
	fi
	echo "git rebase origin/$bname"
	git rebase origin/$bname
}

function path_del {
	eval NEW_PATH="$1"
	if [ -n "$NEW_PATH" ]; then
		PATH=${PATH//"$NEW_PATH:"}
	fi
	export PATH
}

function path_add {
	eval NEW_PATH="$1"
	if [ -n "$NEW_PATH" ]; then
		PATH=${PATH//"$NEW_PATH:"}
		PATH=$NEW_PATH:$PATH
	fi
	export PATH
}
