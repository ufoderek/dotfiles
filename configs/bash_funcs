function cu { if [ -z "$1" ]; then
    #no argument, cd to git root, repo root or svn root or home
    pushd . > /dev/null
    if [ "${PWD}" != "$HOME" ]; then
        cd ..
        until [ -d .git -o -d .repo -o -d .svn -o "${PWD}" == "$HOME" ]; do
            cd ..
        done
        fi
    else
        #argument is integer, go to top directory
        if [ $1 -eq $1 2> /dev/null ]; then
            for (( i=$1; i>=1; i-- )) do
                cd ..
            done
        #argument is string (directory name)
        else
            for ((;;)) do
                cd ..
                if [ "$1" == "${PWD##*/}" -o "${PWD}" == "$HOME" ]; then #shell parameter expansion
                    break
                fi
            done
        fi
    fi
    local new_pwd=`pwd`
    popd > /dev/null
    cd $new_pwd
}

function is_osx {
    local uname_str=`uname`
    if [[ "$uname_str" == Darwin ]]; then
        return 0 #success
    else
        return 1
    fi
}

function is_linux {
    local uname_str=`uname`
    if [[ "$uname_str" == Linux ]]; then
        return 0 #success
    else
        return 1
    fi
}

function is_nvt {
    local my_host=`hostname`
    if [[ "$my_host" == oalnx* ]]; then
        return 0 #success
    elif [[ "$my_host" == oaalnx3 ]]; then
        return 0 #success
    elif [[ "$my_host" == oaplnx7 ]]; then
        return 0 #success
    elif [[ "$my_host" == oaplnx7vm ]]; then
        return 0 #success
    else
        return 1
    fi
}

function is_tmux18 {
    local my_host=`hostname`
    if [[ "$my_host" == oaplnx7 ]]; then
        return 0 #success
    else
        return 1
    fi
}

function parse_git_branch {
    if [ -d mediatek/.git ]; then
        (cd mediatek && \
        git branch --no-color 2> /dev/null | \
        sed -e '/^[^*]/d' -e "s/* \(.*\)/ (\1)/" -e "s/(no branch)/?/" && \
        cd ..)
    else
        git branch --no-color 2> /dev/null | \
        sed -e '/^[^*]/d' -e "s/* \(.*\)/ (\1)/" -e "s/(no branch)/?/"
    fi
}

function parse_svn_rev {
    svn info 2> /dev/null | sed -n -e '/^Revision: \([0-9]*\).*$/s//\1/p'
}

function get_vcs_info {
    local ii=`parse_git_branch`

    if [ -n "$ii" ]; then
        echo -n "$ii"
    else
        ii=`parse_svn_rev`
        if [ -n "$ii" ]; then
            echo -n " (r$ii)"
        fi
    fi
}

function gen_short_date {
    short_date="`date +%H%M`"
}

function gen_short_pwd {
    short_pwd="${PWD/#$HOME/~}"
    local pwdmaxlen=$((${COLUMNS-80}/4))
    [ ${#short_pwd} -gt $pwdmaxlen ] && short_pwd="...${short_pwd:3-$pwdmaxlen}"
}

function get_ip() {
    if ! is_osx; then
        ifconfig "${1:-eth0}" | sed -n '2s/.* inet addr:\([0-9.]*\) .*/\1/p';
    fi
}

function wk {
    if [ -n "$1" ]; then
        if [ $1 == d ] && [ -L ~/wk/.d ] && [ -d ~/wk/.d ]; then
            cd `readlink -f ~/wk/.d`
        else
            cd ~/wk/$1
        fi
    else
        cd ~/wk
    fi
    ls
}

function wt {
    if [ -n "$1" ]; then
        if [ $1 == d ] && [ -L ~/wk/tmp/.d ] && [ -d ~/wk/tmp/.d ]; then
            cd `readlink -f ~/wk/tmp/.d`
        else
            cd ~/wk/tmp/$1
        fi
    else
        cd ~/wk/tmp
    fi
    ls
}

function g {
	if [ "$1" = "ds" ]; then
		cd ~/dotfiles/scripts
	elif [ "$1" = "dc" ]; then
		cd ~/dotfiles/configs
	elif [ "$1" = "b0" ]; then
		cd ~/wk/17L/onboot/bootram/nt72_nand
	elif [ "$1" = "b1" ]; then
		cd ~/wk/17L/onboot/fsr/LLD/PND_NT171
	elif [ "$1" = "sk" ]; then
		cd ~/wk/17L/VDLinux_3.0.20/linux-3.0.20/
	elif [ "$1" = "fsr" ]; then
		cd ~/wk/17L/VDLinux_3.0.20/linux-3.0.20/drivers/fsr/LLD/PND_NT171
	elif [ "$1" = "tfsr" ]; then
		cd ~/wk/17L/VDLinux_3.0.20/linux-3.0.20/drivers/tfsr/LLD/PND_NT171
	elif [ "$1" = "c" ]; then
		cd ~/wk/nvt-sample_v2.0/drivers/nand
	elif [ "$1" = "cc" ]; then
		cd ~/wk/nvt-sample_v2.0/drivers/nand
	elif [ "$1" = "k" ]; then
		cd ~/wk/linux-3.10
	elif [ "$1" = "kn" ]; then
		cd ~/wk/linux-3.10/drivers/mtd/nand/nt72_nand
	elif [ "$1" = "u" ]; then
		cd ~/wk/u-boot-2016.07
	elif [ "$1" = "uu" ]; then
		cd ~/wk/u-boot-2016.07/drivers/mtd/nand/nt72_nand
	fi
}
